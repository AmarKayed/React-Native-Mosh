What is React Native?
    React Native is a framework for building native apps for Android or IOS using Javascript.

    Native App == It's not a Web App that looks like a Mobile App, instead it's a fully fledged Mobile Application.

    We can write the code once in React Native and it will be available on IOS and Android.

    Web Apps Languages:
        - For IOS:
            Swift
            Objective-C
        - For Android:
            Java
            Kotlin
    

    Apps that are built with React-Native:
        - Facebook
        - Instagram
        - Pintrest
        - Skype
        - UberEats


Building a React Native App:
    - Expo CLI
    - React Native CLI

    Expo is better for when we donot have any experience in Mobile Development.

    With Expo we only have Javascript code, we will not have subfolders for android or ios specifically in our project.

    This means that we cannot work directly with the Native APIs of these platforms, we can only work with what Expo gives us.


Setting up the enviroment:
    We need node version 12 or higher
        node -v
    
    Installing Expo CLI globally:
        npm i -g expo-cli

    We should also install Expo Client/Expo mobile app on our phone so we can run the app directly on our phone.

    VSC Extensions:
        React Native Tools by Microsoft
        React Native/React/Redux snippets by EQuimper
        Prettier - Code formatter by Esben Petersen
        Material Icon Theme


Setup Console Commands:
    expo init ProjectName

    Choose blank template for pur Javascript template

    The project folder must be empty in order for this to work, 
    if we choose to create the project's folder before running
    expo init .


The <View> component is like a <div> in the web world.
The <Text> component is used to display text on the screen.

React Native uses function components.


Run the React Native app:
    npm start

    This will open a website with Metro Bundler on it, thus we can view our mobile app from our computer.
    We can also scan the QR code provided in our console in order to use it on our phone.

    In the terminal, we are also provided with keyboard shortcuts to choose on which platform we want to
    run our mobile app.

    We are also provided with the logs of our app, this will be helpful to test our application.


Running the React Native app on Android:
    Download Android Studio:
        https://developer.android.com/studio

    Go with Standard Installation

    After installation, go to:
        Configure > AVD Managar > Create Virtual Device
    
    AVD Stands for "Android Virtual Device"

    We can choose any phone we want, usually it's best to have
    a phone that already has Play Store installed, such as Pixel 3a.

    For the System Image, we can select the latest stable version, which is
    oftenly the second option(Q).

    After the installation of the image system, we can give our
    AVD a name if we choose to.

    After clicking next and finishing the installation, we can run our AVD.

    Now to finally run our React Native app, we can either:
        Press a in our VSC terminal console
        Go to Metro Bundler and select "Run on ANdroid device/emulator"


    Bringing Developer Menu in our AVD:
        Ctrl + M





Running the React Native app on a physical device:

    1. Install Expo on the phone
    2. Have the phone connected to the same Wireless Network as the laptop.
    3. Scan the QR provided in the console or in Metro Bundler

    We can bring the Developer Menu on our Physical Device by shaking it.



Debug + Logging the React Native App:
    using console.log()
    Every console.log() that we use will be executed by the number of devices we are running on.
    If we use console.log("Something"); and we're running our app on an IOS emulator and an
    Android emulator, then "Something" will be printed twice in our VSC console.

    We can see our connected devices in Metro Bundler on the top left corner.

    The console.log() is good for debugging but it can have a negative performance on our
    app. Therefore, we should use console.log() during development only, not when we ship
    our app for production.
        => We should remove our console.log()'s before building our app for production


Debugging in Chrome:

    We can bring the Developer Menu on our Physical Device by shaking it.

    To dismiss an error screen on our AVD we press the Esc key.

    Bring up the Developer Menu on AVD:
        Ctrl + M

    Enable Remote JS Debugging in Chrome.

    This will slow down our app, but it will allow us to run the JS of our app in chrome.

    To Debug the JS of our app, we go to Developer Tools > Sources > Pause on Exceptions( || button on the right)


I should revise the section of debugging.

    After finishing the debugging, we should Disable Remote JS from our AVD.

    Unlike in Web Development, in React Native App Development we cannot 
    select a JSX component and inspect its styles.


Debugging in VSCode:

    We have to install the React Native Tools extension by Microsoft.

    We go to the debug section of our Activity Bar in VSC.

    We have to create a launch.json file. 
    We select React Native.
    We select Attach to packager.

    This will create the launch.json file in our .vscode folder in our project.

I should revise the section of debugging.




Publishing:
    So far we've hosted our app on localhost via Expo Client.
    This means that if we turn off our laptop, the app will no longer be available to us.

    We can publish our app to expo, thus we can have a public host, it's much easier than going through app stores.

    This is purely for development and testing. For production we MUST go through app stores.

    We can publish via Metro Bundler through the "Publish or republish project..." option.

    Or we can use the terminal and use:
        expo publish

    Either way, we're going to be asked a couple of questions in the terminal.

    We will have to create an Expo Account.

    After publishing our app, we will get our very own link for the app.

    On that link, we will see a QR code which we can scan in order to open our app.



















Fundamental Concepts of React Native:
    - View
    - Text
    - Image
    - Button
    - Touchables
    - Alert

    In React Native we donot have html elements.
    We also donot have any CSS. Instead, we use the style prop of the components in
    order to pass in JS components which have CSS properties.

    The equivalent of a <div> is a <View>


    <SafeAreaView> is a <View> that ensures that everything is display under the iPhone X's top knotch.


    <Text> is equivalent to a <p> tag

    If the test is really long, we can set the numberOfLines={1} prop to display it on a single ling.
    We can make the text look like a link using onPress={() => console.log("Text clicked")}

    <Image source = {require('./assets/icon.png')}/>

    require() returns the reference number of our picture

    We can also go to:
        https://picsum.photos/
    to get a random photo from the internet

    For Network images we must also provide the size, for local images we don't have to do that.

    Example:
      <Image 
      blurRadius={10}
      fadeDuration = {1000}
      source = {{
        width: 200,
        height: 300,
        uri: 'https://picsum.photos/200/300'}} />


    The default fadeEffect duration is 300ms
    fadeDuration ONLY WORKS ON ANDROID, it has no effect on IOS.
    We also have resizeMode which works exactly like in CSS to resize the image.


    By default, the <Image /> component doesn't have an onPress prop.

    To make the image touchable, we import the <TouchableWithoutFeedback> component.

    The <TouchableWithoutFeedback> component has props such as:
        onPress, onLongPress, etc.

    We can also use <TouchableOpacity> if we want to reduce the opacity for 1s after tapping the component.

    We also have <TouchableHighlight>

    <TouchableWithoutFeedback>, <TouchableOpacity>, <TouchableHighlight> are CROSS-PLATFORM

    We also have an Android Specific Touchable: <TouchableNativeFeedback>


Button:
    <Button title = "Click Me" onPress = {() => {Alert.alert("Button Pressed", "My message", [
        {text: "Yes", onPress: () => console.log("Yes!")},
        {text: "No", onPress: () => console.log("No!")},
    ])}}></Button>


    Alert.prompt ONLY WORKS FOR IOS


StyleSheets:
    In React Native, there is no CSS.
    Instead, we use JS objects with properties similar to the ones existing in CSS.

    Furthermore, we use StyleSheet.create() in order to validate the properties
    of our styles obiect.

    To simulate adding more style classes to an element in HTML, we can also
    assign multiple style objects to a component in React Native by simply
    providing an array of style objects to the style prop of the respective object.

    Example:
        <View style = {[styleObiect1, styleObiect2, styleObiect3]}></View>

    The object on the right will overwrite the object on the left, exactly like
    how CSS classes that are written farther down the code will overwrite the classes
    written at the start of the code.

    We can write the style objects in another file if we choose to and import them in the
    component's file, but it's a common practice to write the styles below the component
    definition in the same file, since we're going to work with both the component AND its
    styles at the same time.



Platform-Specific Code:
    <SafeAreaView> is only available for IOS, not for Android.

    We need to import Platform. This will allow us to dynamically set 
    StyleSheet properties based on the platform that the app is running on.

    Platform.OS provides us with many details about the platform.

    StatusBar provides us with details about the phone's statusbar.

    Example:
    We want to add a paddingTop for all the Android phones:
        paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0

    We verify if the platform is Android, if yes then we simply add the 
    height of the Status Bar as the padding of the top.



Layout:
    We can get the dimensions of the screen by importing Dimensions
    and using:
        Dimensions.get('screen')

    We can use Ctrl + Left/Right Arrow Key to change the orientation of the phone.
    We can use Ctrl + Up/Down Arrow Key to change the zoom of our phone.

    If we want our phone to support orientation, we go to app.json
    and change the "orientation" property to "default"


    To detect app orientation we use the hooks library
    developed by the react-native-community:
        https://github.com/react-native-community/hooks
    
    to install this library we use:
        npm i @react-native-community/hooks
    
    Unlike the built-in React Native Dimensions API, the useDimensions
    Hook from the react-native-community library provides us with updated
    current Dimensions of the screen based on the orientation of the phone.

        => useDimensions is better than Dimensions



Flexbox:
    Flexbox in React Native is a little bit different from the one in CSS.
    
    flex: 1 will make our component take up the whole screen
    flex: 0.5 will make it take up only half of the screen


    If we have multiple children inside of a parent component and set the flex to 1
    for each of the children, the ammount of screen space taken by the parent will
    be divided equally among the children.

    if we set the flex of the first child element to 2, and the flex of the other
    two child elements to 1, then the first child will be twice as big as
    the other two, because we have divided the space of the parent element to
    2 + 1 + 1 == 4 segments.

    The same is true if we set the flex of the first child element to 100 and the
    other two to 1, then there will be 102 segments, 100 of which are taken by
    the first element.

    In the Web world, by default elements are layed out horizontally.
    In the App world, by default elements are layed out vertically.

    To lay out the child elements horizontally, we use flexDirection: 'row' on
    the parent element.


    If we ever need to view the options of an instruction, we can use:
        Ctrl + Space

    Primary Axis == horizontal axis
    Cross Axis == vertical axis

    Aligning items in React Native is the same as in CSS via alignItems and justifyContent.

    Remember: alignItems: 'baseline'

    If we use flexWrap, then alignItems will not work anymore,
    instead we MUST use alignContent.

    If we donot have wrapping enables, then alignContent will have no effect.    


Positioning:
    In React Native, by default every element has the position style property set to 'relative'.
    Everything else works exactly the same as in CSS.

    
